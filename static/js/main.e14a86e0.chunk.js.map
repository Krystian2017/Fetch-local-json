{"version":3,"sources":["components/Word.js","components/App.js","serviceWorker.js","index.js"],"names":["Word","props","react_default","a","createElement","english","polish","App","state","words","isLoaded","_this2","this","fetch","then","response","json","data","setState","console","log","map","word","src_components_Word","key","id","en","pl","className","href","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_components_App","document","getElementById","URL","process","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8OAUeA,eAPF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,+BACoBF,EAAAC,EAAAC,cAAA,cAASH,EAAMI,SADnC,iBACmE,IACjEH,EAAAC,EAAAC,cAAA,cAASH,EAAMK,WCsDJC,6MAvDbC,MAAQ,CACNC,MAAO,GACPC,UAAU,sFAGQ,IAAAC,EAAAC,KAElBC,MAAM,mBACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJN,EAAKO,SAAS,CACZT,MAAOQ,EAAKR,MACZC,UAAU,uCAiBhBS,QAAQC,IAAI,UACZ,IAAMX,EAAQG,KAAKJ,MAAMC,MAAMY,IAAI,SAAAC,GAAI,OACrCpB,EAAAC,EAAAC,cAACmB,EAAD,CAAMC,IAAKF,EAAKG,GAAIpB,QAASiB,EAAKI,GAAIpB,OAAQgB,EAAKK,OAErD,OACEzB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,cAAd,6BACA1B,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,mBAAb,oJAGc,IACZ1B,EAAAC,EAAAC,cAAA,KACEwB,UAAU,WACVC,KAAK,oDAFP,wBAQJ3B,EAAAC,EAAAC,cAAA,UAAKQ,KAAKJ,MAAME,SAAWD,EAAQ,2BAlDzBqB,aCQZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTxB,KAAK,SAAA6B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrC,QACfgC,UAAUC,cAAcO,YAI1B7B,QAAQC,IACN,gHAKEmB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBxB,QAAQC,IAAI,sCAGRmB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BQ,MAAM,SAAAC,GACLjC,QAAQiC,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,oBAAwB1B,OAAOC,SAASL,MACpD+B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,oBAAN,sBAEP5B,GAgEV,SAAiCO,EAAOC,GAEtC1B,MAAMyB,GACHxB,KAAK,SAAAC,GAEJ,IAAMgD,EAAchD,EAASiD,QAAQC,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMtD,KAAK,SAAA6B,GACjCA,EAAa0B,aAAavD,KAAK,WAC7BmB,OAAOC,SAASoC,aAKpBjC,EAAgBC,EAAOC,KAG1BY,MAAM,WACLhC,QAAQC,IACN,mEArFAmD,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMtD,KAAK,WACjCK,QAAQC,IACN,+GAMJiB,EAAgBC,EAAOC,MC1C/BE","file":"static/js/main.e14a86e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Word.css\";\r\n\r\nconst Word = props => (\r\n  <li>\r\n    Word for English: <strong>{props.english}</strong>. Translation:{\" \"}\r\n    <strong>{props.polish}</strong>\r\n  </li>\r\n);\r\n\r\nexport default Word;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Word from \"./Word\";\n\nclass App extends Component {\n  state = {\n    words: [],\n    isLoaded: false\n  };\n\n  componentDidMount() {\n    // setTimeout(this.fetchData, 3000)\n    fetch(\"data/words.json\")\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          words: data.words,\n          isLoaded: true\n        });\n      });\n  }\n\n  // fetchData = () => {\n  //   fetch('data/words.json')\n  //     .then(response => response.json())\n  //     .then(data => {\n  //       this.setState({\n  //         words: data.words,\n  //         isLoaded: true\n  //       })\n  //     })\n  // }\n\n  render() {\n    console.log(\"render\");\n    const words = this.state.words.map(word => (\n      <Word key={word.id} english={word.en} polish={word.pl} />\n    ));\n    return (\n      <div className=\"App\">\n        <div>\n          <h1 className=\"App-header\">Polish-English dictionary</h1>\n          <p className=\"App-description\">\n            This application is a Polish-English dictionary - I used create-app\n            and Fetch to load a local file. It is simply app and you can find\n            the code on{\" \"}\n            <a\n              className=\"App-link\"\n              href=\"https://github.com/Krystian2017/fetch-local-json\"\n            >\n              my GitHub account.\n            </a>\n          </p>\n        </div>\n        <ul>{this.state.isLoaded ? words : \"loading data...\"}</ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}